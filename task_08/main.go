// Дана переменная int64. Разработать программу которая устанавливает i-й бит в 1 или 0.

package main

import "fmt"

// SetBit Устанавливает iй бит в 1
func SetBit(num int64, i int) int64 {
	/*Поразрядное ИЛИ. Сначала мы создаем число, где только iй бит установлен в 1.
	Затем, сдвигаем 1 на i позиций влево. Затем происходит побитовое ИЛИ,
	что означает, что происходит сравнение исходных битов с созданными и, если
	хоть один из битов равен 1, то будет установлено 1, что означает,
	что поменяется только iй бит.
	*/
	return num | (1 << i)
}

func ClearBit(num int64, i int) int64 {
	/*Поразрядное И. Также создаем число, где все биты, кроме iго равны 1,
	это делается путем инверсии(^). Затем сдвигаем 1 на i позиций влево.
	Затем,используя побитовое И сравниваются исходное и созданное числа:
	Только если оба бита равны 1 - останется 1. Это означает, что поменяется только iй бит
	*/
	return num & ^(1 << i)
}

func main() {
	var num int64
	var i int
	fmt.Println("Введите целое число num:")
	if _, err := fmt.Scan(&num); err != nil {
		fmt.Println("Введены некорректные данные. Установлено значение по умолчанию: 154")
		num = 154
	}
	fmt.Println("Введите целое число i:")
	if _, err := fmt.Scan(&i); err != nil {
		fmt.Println("Введены некорректные данные. Установлено значение по умолчанию: 5")
		i = 5
	}

	fmt.Printf("Число %d до установки бита %d в двоичном виде: %b\n", num, i, num)
	num = SetBit(num, i)
	fmt.Printf("Число %d после установки бита %d в 1 в двоичном виде: %b\n", num, i, num)
	num = ClearBit(num, i)
	fmt.Printf("Число %d после установки бита %d в 0 в двоичном виде: %b\n", num, i, num)
}
